// Generated by CoffeeScript 1.10.0
define(['external/react', 'jquery', 'modules/clean/datetime', 'modules/clean/frame_messenger', 'modules/clean/react/previews/password_component', 'modules/clean/react/previews/preview_html', 'modules/clean/react/sprite', 'modules/core/i18n', 'modules/core/uri'], function(React, $j, DateTime, FrameMessenger, PasswordComponentClass, PreviewHTMLClass, Sprite, i18n, URI) {
  var CHILD_IFRAME_ACTIONS, PREVIEW_HTML_IFRAME_CLASS, PasswordComponent, PreviewHTML, PreviewPasswordProtected, _, div, ref, span;
  ref = React.DOM, div = ref.div, span = ref.span;
  _ = i18n._;
  PasswordComponent = React.createFactory(PasswordComponentClass);
  PreviewHTML = React.createFactory(PreviewHTMLClass);
  PREVIEW_HTML_IFRAME_CLASS = 'previewhtml';
  CHILD_IFRAME_ACTIONS = ['incorrect_password'];
  PreviewPasswordProtected = React.createClass({
    displayName: 'PreviewPasswordProtected',
    propTypes: {
      icon: React.PropTypes.string,
      filename: React.PropTypes.string.isRequired,
      created: React.PropTypes.object,
      size: React.PropTypes.string,
      fileUrl: React.PropTypes.instanceOf(URI),
      previewType: React.PropTypes.string.isRequired
    },
    getDefaultProps: function() {
      return {
        icon: 'page_white_picture_32'
      };
    },
    getInitialState: function() {
      return {
        hasLoadError: false,
        passwordSubmitted: false,
        passwordAttempts: 0,
        passwordStr: null
      };
    },
    _passwordChanged: function(passwordStr) {
      return this.setState({
        passwordSubmitted: true,
        passwordStr: passwordStr
      });
    },
    _handleTrustedMessageFromChild: function(messageJson) {
      switch (messageJson.action) {
        case 'incorrect_password':
          return this.setState({
            passwordSubmitted: false,
            passwordAttempts: this.state.passwordAttempts + 1
          });
      }
    },
    componentDidMount: function() {
      this._frameMessenger = new FrameMessenger();
      this._frameMessenger.configureChildMessaging('iframe.' + PREVIEW_HTML_IFRAME_CLASS, this._handleTrustedMessageFromChild, CHILD_IFRAME_ACTIONS);
      return this._frameMessenger.startListening();
    },
    componentWillUnmount: function() {
      return this._frameMessenger.stopListening();
    },
    _onLoadError: function() {
      return this.setState({
        hasLoadError: true,
        passwordSubmitted: false
      });
    },
    _renderCreatedTime: function() {
      return [
        span({}, DateTime.format_date(this.props.created, 'MMMM dd, yyyy hh:mm a')), span({
          className: 'bottom-dot'
        }, ' \u00B7 ')
      ];
    },
    _renderSize: function() {
      return span({}, this.props.size);
    },
    _renderLoadError: function() {
      return span({
        className: 'preview-password-protected-error'
      }, _('Failed to generate preview'));
    },
    _renderInvalidPassword: function() {
      return span({
        className: 'preview-password-protected-error'
      }, _('Invalid password, please try again.'));
    },
    _renderPasswordMessage: function() {
      return span({
        className: 'preview-blank-title'
      }, _('Please enter this document\u2019s password to view it.'));
    },
    _renderHtml: function() {
      var localOnError, localType, localUrl;
      localUrl = this.props.fileUrl;
      localUrl.updateQuery({
        generate_preview: 1
      });
      localUrl.updateQuery({
        password_str: this.state.passwordStr
      });
      localUrl.setAuthority(localUrl.getAuthority().replace('dl-web', 'dl-doc'));
      localOnError = this._onLoadError;
      localType = this.props.previewType;
      return PreviewHTML({
        src: localUrl,
        previewType: localType,
        onError: localOnError
      });
    },
    render: function() {
      var ref1;
      if (this.state.passwordSubmitted) {
        return this._renderHtml();
      } else {
        return div({
          className: 'preview-blank-container'
        }, div({
          className: 'preview-blank-wrapper'
        }, div({
          className: 'preview-blank-icon'
        }, Sprite({
          group: 'web',
          name: this.props.icon
        })), div({
          className: 'preview-blank-title'
        }, this.props.filename), div({
          className: 'preview-blank-info'
        }, (this.props.created != null) && !isNaN((ref1 = this.props.created) != null ? ref1.getTime() : void 0) ? this._renderCreatedTime() : void 0, (this.props.size != null) && this.props.size !== '' ? this._renderSize() : void 0), this.state.hasLoadError ? this._renderLoadError() : this.state.passwordAttempts > 0 ? this._renderInvalidPassword() : this._renderPasswordMessage(), !this.state.hasLoadError ? PasswordComponent({
          onPasswordSubmit: this._passwordChanged
        }) : void 0));
      }
    }
  });
  return PreviewPasswordProtected;
});

//# sourceMappingURL=preview_password_protected.js.map
