// Generated by CoffeeScript 1.10.0
define(['external/underscore', 'external/reflux', 'external/lru', 'modules/clean/bolt', 'modules/clean/storage', 'modules/clean/comments/actions', 'modules/clean/file_activity/api'], function($u, Reflux, LRUCache, Bolt, arg, Actions, API) {
  var FILE_ACTIVITIES_LIMIT, SessionStorage, requestIdOf;
  SessionStorage = arg.SessionStorage;
  FILE_ACTIVITIES_LIMIT = 10;
  requestIdOf = function(actorId, context, contextData) {
    actorId = actorId != null ? actorId : '';
    return actorId + ":" + context + ":" + contextData;
  };
  return Reflux.createStore({
    listenables: [Actions],
    init: function() {
      this.boltClients = {};
      this.pendingRequests = {};
      this.fileActivities = new LRUCache(FILE_ACTIVITIES_LIMIT);
      return this.state = this.getInitialState();
    },
    getInitialState: function() {
      var state, stopLiveUpdate;
      stopLiveUpdate = this._stopLiveUpdate;
      this.fileActivities.shift = function() {
        var entry;
        entry = LRUCache.prototype.shift.call(this);
        stopLiveUpdate(entry.key);
        return entry;
      };
      state = {
        actorId: null,
        viewing: {
          context: null,
          contextData: null
        }
      };
      Object.defineProperty(state, 'activity', {
        get: (function(_this) {
          return function() {
            var requestId;
            requestId = requestIdOf(_this.state.actorId, _this.state.viewing.context, _this.state.viewing.contextData);
            return _this.fileActivities.get(requestId);
          };
        })(this)
      });
      return state;
    },
    setState: function(nextState, callback) {
      $u.extend(this.state, nextState);
      this.trigger(this.state);
      return typeof callback === "function" ? callback() : void 0;
    },
    onSetActorId: function(actorId) {
      return this.setState({
        actorId: actorId
      });
    },
    onAddComment: function(arg1) {
      var metadata, oref, targetActivity, text;
      targetActivity = arg1.targetActivity, text = arg1.text, metadata = arg1.metadata, oref = arg1.oref;
    },
    onStartViewingComments: function(arg1) {
      var context, contextData, isBackgroundRequest, oref, promise, requestId;
      context = arg1.context, contextData = arg1.contextData, oref = arg1.oref, isBackgroundRequest = arg1.isBackgroundRequest;
      requestId = requestIdOf(this.state.actorId, context, contextData);
      if (requestId in this.pendingRequests) {
        return;
      }
      promise = API.fetchFileActivityWithBoltData({
        actorId: this.state.actorId,
        context: this.state.viewing.context,
        contextData: this.state.viewing.contextData,
        oref: oref,
        isBackgroundRequest: isBackgroundRequest
      });
      this.pendingRequests[requestId] = promise;
      promise["finally"]((function(_this) {
        return function() {
          return delete _this.pendingRequests[requestId];
        };
      })(this));
      this.setState({
        viewing: {
          context: context,
          contextData: contextData
        }
      });
      return promise.then((function(_this) {
        return function(arg2) {
          var boltData, fileActivity;
          fileActivity = arg2[0], boltData = arg2[1];
          _this.fileActivities.put(requestId, fileActivity);
          return _this.trigger(_this.state);
        };
      })(this));
    },
    onStopViewingComments: function(arg1) {
      var context, contextData;
      context = arg1.context, contextData = arg1.contextData;
      return this.setState({
        viewing: {
          context: null,
          contextData: null
        }
      });
    },
    _startLiveUpdate: function() {},
    _stopLiveUpdate: function() {}
  });
});

//# sourceMappingURL=store.js.map
