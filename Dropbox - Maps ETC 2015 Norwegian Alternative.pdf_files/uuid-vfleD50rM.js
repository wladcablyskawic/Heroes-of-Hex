// Generated by CoffeeScript 1.10.0
define(['modules/clean/crypto'], function(crypto) {
  var BYTE_TO_HEX, bytesToHex, exports, getRandomBytes, i, toByte, toString;
  exports = {};
  BYTE_TO_HEX = (function() {
    var j, results;
    results = [];
    for (i = j = 0x00; j <= 255; i = ++j) {
      results.push((i + 0x100).toString(16).substr(1));
    }
    return results;
  })();
  bytesToHex = function(bytes) {
    var byte, hexStrings;
    hexStrings = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = bytes.length; j < len; j++) {
        byte = bytes[j];
        results.push(BYTE_TO_HEX[byte]);
      }
      return results;
    })();
    return hexStrings.join('');
  };
  toByte = function(number) {
    return number & 0xff;
  };
  toString = function(bytes) {
    var byteGroups, hexGroups, string;
    byteGroups = [bytes.slice(0, 4), bytes.slice(4, 6), bytes.slice(6, 8), bytes.slice(8, 10), bytes.slice(10, 16)];
    hexGroups = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = byteGroups.length; j < len; j++) {
        bytes = byteGroups[j];
        results.push(bytesToHex(bytes));
      }
      return results;
    })();
    string = hexGroups.join('-');
    return string;
  };
  getRandomBytes = function() {
    var bytes, number, numbers;
    numbers = new Array(16);
    crypto.getRandomValues(numbers);
    bytes = (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = numbers.length; j < len; j++) {
        number = numbers[j];
        results.push(toByte(number));
      }
      return results;
    })();
    return bytes;
  };
  exports.v4 = function() {
    var bytes;
    bytes = getRandomBytes();
    bytes[6] = (bytes[6] & 0x0f) | 0x40;
    bytes[8] = (bytes[8] & 0x3f) | 0x80;
    return toString(bytes);
  };
  return exports;
});

//# sourceMappingURL=uuid.js.map
