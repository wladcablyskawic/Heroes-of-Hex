// Generated by CoffeeScript 1.10.0
define(['external/react', 'jquery', 'modules/clean/analytics', 'modules/clean/annotations/preview_image_annotations_toolbar', 'modules/clean/image_cache', 'modules/clean/image_preview_util', 'modules/clean/image_size', 'modules/clean/image_annotations', 'modules/clean/react/file_viewer/actions', 'modules/clean/react/file_viewer/store', 'modules/clean/react/file_viewer/utils', 'modules/clean/react/previews/preview_blank', 'modules/clean/react/previews/preview_image_zoom', 'modules/clean/web_timing_logger', 'modules/core/browser', 'modules/core/i18n', 'modules/core/uri'], function(React, $j, arg, PreviewImageAnnotationsToolbar, ImageCache, ImagePreviewUtil, arg1, ImageAnnotations, FileViewerActions, FileViewerStore, arg2, PreviewBlankClass, arg3, WebTimingLogger, Browser, i18n, URI) {
  var MAXIMUM_ZOOM_PERCENT, PreloadHelpers, PreviewActivityLogger, PreviewBlank, PreviewImageWithAnnotations, PreviewImageZoom, ZOOM_FIT_PADDING, ZOOM_MULTIPLIER, _, cx, d, image_best_fit_size;
  PreviewActivityLogger = arg.PreviewActivityLogger;
  image_best_fit_size = arg1.image_best_fit_size;
  PreloadHelpers = arg2.PreloadHelpers;
  PreviewImageZoom = arg3.PreviewImageZoom;
  cx = React.addons.classSet;
  d = React.DOM;
  _ = i18n._;
  ZOOM_MULTIPLIER = 1.25;
  ZOOM_FIT_PADDING = "40px 36px 108px";
  MAXIMUM_ZOOM_PERCENT = 16;
  PreviewBlank = React.createFactory(PreviewBlankClass);
  PreviewImageWithAnnotations = React.createClass({
    displayName: "PreviewImageWithAnnotations",
    propTypes: {
      "thumbnail-url-tmpl": React.PropTypes.string.isRequired,
      "file-extension": React.PropTypes.string.isRequired,
      "file-meta": React.PropTypes.shape({
        filename: React.PropTypes.string,
        mtime: React.PropTypes.number,
        formattedSize: React.PropTypes.string
      }).isRequired,
      gifUrl: React.PropTypes.string,
      imagesToPreload: React.PropTypes.array,
      onLoad: React.PropTypes.func,
      onError: React.PropTypes.func,
      "log-time-to-interactive": React.PropTypes.bool,
      isFullscreen: React.PropTypes.bool,
      index: React.PropTypes.number,
      count: React.PropTypes.number,
      onPrevious: React.PropTypes.func,
      onNext: React.PropTypes.func,
      "should-display-annotations-toolbar": React.PropTypes.bool
    },
    getInitialState: function() {
      if (this.props['should-display-annotations-toolbar']) {
        return {
          imageVisibility: "hidden",
          imageLoadError: false,
          fullSizeImage: false,
          width: "",
          height: "",
          zoomPercent: 0,
          minimumZoomPercent: 0,
          margin: "auto",
          padding: ZOOM_FIT_PADDING
        };
      } else {
        return {
          imageVisibility: "hidden",
          imageLoadError: false
        };
      }
    },
    _logOpen: function() {
      return PreviewActivityLogger.log("open", {
        file_ext: this.props["file-extension"]
      });
    },
    _preloadImages: function(imagesToPreload) {
      var i, imageCache, len, results, thumbnailUrl;
      if (imagesToPreload != null) {
        imageCache = new ImageCache();
        results = [];
        for (i = 0, len = imagesToPreload.length; i < len; i++) {
          thumbnailUrl = imagesToPreload[i];
          results.push(imageCache.preload_image(PreloadHelpers.getSizedImageUrl(thumbnailUrl)));
        }
        return results;
      }
    },
    _onImageLoad: function() {
      var base;
      this.$fullsizeImage = null;
      this.$image = this.imagePreviewUtil.getPreviewImage();
      if (this.props["log-time-to-interactive"]) {
        WebTimingLogger.mark_time_to_interactive();
      }
      this.setState({
        imageVisibility: "visible"
      });
      this.imageAnnotations.onImageLoad(this.switchImage, this.onResizeImage);
      if (!this._shouldDisableZoom()) {
        this.$image.off("click").on("click", this._onFullscreen);
      }
      if (this.props['should-display-annotations-toolbar']) {
        this.$fullsizeImage = new Image();
        this.$fullsizeImage.src = this._gifUrlOrResizedUrl(true);
        this.$fullsizeImage.on("load", this._onFullsizeLoad);
      }
      return typeof (base = this.props).onLoad === "function" ? base.onLoad() : void 0;
    },
    _onFullscreen: function() {
      if (this.props.isFullscreen != null) {
        return FileViewerActions.openFullscreen();
      } else {
        return PreviewImageZoom.open(this.props["thumbnail-url-tmpl"], this._gifUrlOrResizedUrl());
      }
    },
    _gifUrlOrResizedUrl: function(forceFullsize) {
      if (forceFullsize == null) {
        forceFullsize = false;
      }
      if (this.props.gifUrl != null) {
        return this.props.gifUrl;
      } else {
        return PreloadHelpers.getSizedImageUrl(this.props["thumbnail-url-tmpl"], forceFullsize || this.state.fullSizeImage);
      }
    },
    _onImageError: function() {
      var base;
      if (typeof (base = this.props).onError === "function") {
        base.onError();
      }
      return this.setState({
        imageLoadError: true
      });
    },
    _shouldDisableZoom: function() {
      var ref;
      return Browser.msie_version_at_most(9) || ((ref = this.imageAnnotations) != null ? ref.isImagePreviewAnnotationCreationEnabled : void 0);
    },
    _onFullsizeLoad: function() {
      var zoomPercent;
      zoomPercent = this._calculateZoomPercent(this.$image.height());
      return this.setState({
        zoomPercent: zoomPercent,
        minimumZoomPercent: zoomPercent,
        fullSizeImage: true
      });
    },
    onResizeImage: function() {
      var zoomPercent;
      if (this.state.width === "" && this.state.height === "") {
        zoomPercent = this._calculateZoomPercent(this.$image.height());
        return this.setState({
          zoomPercent: zoomPercent,
          minimumZoomPercent: zoomPercent
        });
      }
    },
    _onZoom: function(newWidth, newHeight) {
      var $scrollContainer, maxHeight, maxWidth, newMargin, newScrollLeft, newScrollTop, oldScrollLeft, oldScrollTop, oldWidth, ratio, viewHeight, viewWidth, xMargin, yMargin, zoomPercent;
      if ((newWidth + "px") === this.state.width) {
        return;
      }
      zoomPercent = this._calculateZoomPercent(newHeight);
      if (zoomPercent < this.state.minimumZoomPercent) {
        this._onZoomFit();
        return;
      }
      if (zoomPercent > MAXIMUM_ZOOM_PERCENT) {
        maxWidth = MAXIMUM_ZOOM_PERCENT * this.$fullsizeImage.naturalWidth;
        maxHeight = MAXIMUM_ZOOM_PERCENT * this.$fullsizeImage.naturalHeight;
        this._onZoom(maxWidth, maxHeight);
        return;
      }
      oldWidth = this.$image.width();
      ratio = newWidth / oldWidth;
      $scrollContainer = this.imagePreviewUtil.getPreviewImageWrapper();
      oldScrollLeft = $scrollContainer.scrollLeft();
      oldScrollTop = $scrollContainer.scrollTop();
      viewWidth = $scrollContainer.width();
      viewHeight = $scrollContainer.height();
      newScrollLeft = (viewWidth * (ratio - 1) / 2) + (oldScrollLeft * ratio);
      newScrollTop = (viewHeight * (ratio - 1) / 2) + (oldScrollTop * ratio);
      yMargin = newHeight >= viewHeight ? "0" : "auto";
      xMargin = newWidth >= viewWidth ? "0" : "auto";
      newMargin = yMargin + " " + xMargin;
      return this.setState({
        fullSizeImage: this.$fullsizeImage != null,
        width: newWidth + "px",
        height: newHeight + "px",
        margin: newMargin,
        zoomPercent: zoomPercent,
        padding: "0"
      }, function() {
        var shouldDebounce;
        $scrollContainer.scrollLeft(newScrollLeft);
        $scrollContainer.scrollTop(newScrollTop);
        return this.imageAnnotations.onResize(shouldDebounce = false);
      });
    },
    _onZoomIn: function() {
      var newHeight, newWidth;
      newWidth = this.$image.width() * ZOOM_MULTIPLIER;
      newHeight = this.$image.height() * ZOOM_MULTIPLIER;
      return this._onZoom(newWidth, newHeight);
    },
    _onZoomOut: function() {
      var newHeight, newWidth;
      newWidth = this.$image.width() / ZOOM_MULTIPLIER;
      newHeight = this.$image.height() / ZOOM_MULTIPLIER;
      return this._onZoom(newWidth, newHeight);
    },
    _onZoomOriginalOrFit: function() {
      if (this.state.zoomPercent === 1) {
        return this._onZoomFit();
      } else {
        return this._onZoomOriginal();
      }
    },
    _onZoomOriginal: function() {
      var newHeight, newWidth;
      newWidth = this.$image.prop('naturalWidth');
      newHeight = this.$image.prop('naturalHeight');
      return this._onZoom(newWidth, newHeight);
    },
    _onZoomFit: function() {
      if (this.state.width === "") {
        return;
      }
      return this.setState({
        width: "",
        height: "",
        margin: "auto",
        padding: ZOOM_FIT_PADDING
      }, function() {
        var shouldDebounce, zoomPercent;
        this.imageAnnotations.onResize(shouldDebounce = false);
        zoomPercent = this._calculateZoomPercent(this.$image.height());
        return this.setState({
          zoomPercent: zoomPercent,
          minimumZoomPercent: zoomPercent
        });
      });
    },
    _calculateZoomPercent: function(height) {
      var naturalHeight, zoomPercent;
      if (!this.$fullsizeImage) {
        return;
      }
      naturalHeight = this.$fullsizeImage.naturalHeight;
      if (height && naturalHeight) {
        zoomPercent = height / naturalHeight;
        return zoomPercent;
      }
    },
    switchImage: function(newThumbnailUrlTmpl, callback) {
      var forceAnnotationsToReload;
      if (newThumbnailUrlTmpl === this.props["thumbnail-url-tmpl"]) {
        forceAnnotationsToReload = true;
      }
      return this.setProps({
        "thumbnail-url-tmpl": newThumbnailUrlTmpl,
        onLoad: callback
      }, (function(_this) {
        return function() {
          if (forceAnnotationsToReload) {
            return _this._onImageLoad();
          }
        };
      })(this));
    },
    componentWillUnmount: function() {
      var ref;
      if (this.props.isFullscreen == null) {
        PreviewImageZoom.close();
      }
      return (ref = this.imageAnnotations) != null ? ref.reset() : void 0;
    },
    componentWillMount: function() {
      this._preloadImages(this.props.imagesToPreload);
      this.imageAnnotations = new ImageAnnotations();
      return this.imagePreviewUtil = new ImagePreviewUtil();
    },
    componentDidMount: function() {
      return this._logOpen();
    },
    componentWillReceiveProps: function(nextProps) {
      if (this.props['should-display-annotations-toolbar'] && nextProps["thumbnail-url-tmpl"] !== this.props["thumbnail-url-tmpl"]) {
        this.imageAnnotations.removeAnnotations();
        this.setState({
          width: "",
          height: "",
          margin: "auto",
          padding: ZOOM_FIT_PADDING,
          fullSizeImage: false
        });
      }
      this._preloadImages(nextProps.imagesToPreload);
      return this._logOpen();
    },
    _renderAnnotationsToolbar: function() {
      var ref;
      return React.createElement(PreviewImageAnnotationsToolbar, {
        index: this.props.index || FileViewerStore.currentIndex(),
        count: this.props.count || ((ref = FileViewerStore.files()) != null ? ref.length : void 0),
        zoomPercent: this.state.zoomPercent,
        minimumZoomPercent: this.state.minimumZoomPercent,
        maximumZoomPercent: MAXIMUM_ZOOM_PERCENT,
        onPrevious: this.props.onPrevious || FileViewerActions.flipPrevious,
        onNext: this.props.onNext || FileViewerActions.flipNext,
        onFullscreen: this._onFullscreen,
        onZoomIn: this._onZoomIn,
        onZoomOut: this._onZoomOut,
        onZoomOriginalOrFit: this._onZoomOriginalOrFit
      });
    },
    _renderPreviewImage: function() {
      var classSet, obj, previewImageContainerStyles, previewImageStyles;
      classSet = (
        obj = {},
        obj["" + this.imagePreviewUtil.PREVIEW_IMAGE_CONTAINER] = true,
        obj["zoom-disabled"] = this._shouldDisableZoom(),
        obj["has-annotations-toolbar"] = this.props['should-display-annotations-toolbar'],
        obj
      );
      previewImageStyles = {
        visibility: this.state.imageVisibility
      };
      if (this.props['should-display-annotations-toolbar']) {
        previewImageStyles = {
          visibility: this.state.imageVisibility,
          maxWidth: this.state.width,
          maxHeight: this.state.height,
          width: this.state.width,
          height: this.state.height,
          margin: this.state.margin
        };
        previewImageContainerStyles = {
          padding: this.state.padding
        };
      }
      return d.div({
        className: cx(classSet),
        style: previewImageContainerStyles
      }, d.div({
        className: this.imagePreviewUtil.PREVIEW_IMAGE_WRAPPER
      }, d.img({
        className: this.imagePreviewUtil.PREVIEW_IMAGE,
        src: this._gifUrlOrResizedUrl(),
        style: previewImageStyles,
        onLoad: this._onImageLoad,
        onError: this._onImageError
      })), this.props['should-display-annotations-toolbar'] ? this._renderAnnotationsToolbar() : void 0);
    },
    _renderPreviewBlank: function() {
      var fileMeta;
      fileMeta = this.props["file-meta"];
      return PreviewBlank({
        filename: fileMeta.filename,
        created: new Date(fileMeta.mtime * 1000),
        size: fileMeta.formattedSize
      });
    },
    render: function() {
      if (this.state.imageLoadError) {
        return this._renderPreviewBlank();
      } else {
        return this._renderPreviewImage();
      }
    }
  });
  return {
    PreviewImageWithAnnotations: PreviewImageWithAnnotations
  };
});

//# sourceMappingURL=preview_image_with_annotations.js.map
